../longhorn-website/content//blog/kubecon-eu-2020.md:14:{{< figure src="/img/blogs/kubecon-eu-2020/booth.png" >}}
../longhorn-website/content//blog/kubecon-eu-2020.md:47:{{< figure src="/img/blogs/kubecon-eu-2020/tshirt.png" >}}
../longhorn-website/content//blog/kubecon-na-2020.md:22:{{< figure src="/img/blogs/kubecon-na-2020/booth.png" >}}
../longhorn-website/content//blog/kubecon-na-2020.md:50:{{< figure src="/img/blogs/kubecon-eu-2020/tshirt.png" >}}
../longhorn-website/content//blog/kubecon-na-2021.md:27:{{< figure src="/img/blogs/kubecon-eu-2020/tshirt.png" >}}
../longhorn-website/content//blog/performance-scalability-report-aug-2020.md:55:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/bandwidth.png" >}}
../longhorn-website/content//blog/performance-scalability-report-aug-2020.md:67:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/iops.png" >}}
../longhorn-website/content//blog/performance-scalability-report-aug-2020.md:69:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/latency.png" >}}
../longhorn-website/content//blog/performance-scalability-report-aug-2020.md:114:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/scalability.png" >}}
../longhorn-website/content//docs/1.4.0/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.4.0/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.4.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.4.0/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.0/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.4.0/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.4.0/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.4.0/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.4.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.0/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.0/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.4.0/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.0/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.4.0/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.4.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.4.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.4.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.4.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.4.0/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.0/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/1.4.0/deploy/important-notes/index.md:18:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
../longhorn-website/content//docs/1.4.0/deploy/important-notes/index.md:71:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.0/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.4.0/deploy/install/_index.md:162:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.4.0/deploy/install/_index.md:223:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-helm.md:15:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-helm.md:42:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-helm.md:48:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.0/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.0/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.0/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.0/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.4.0/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.4.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x. For other versions, please upgrade to v1.3.x first.
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:106:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:110:    - Check if the longhorn-conversion-webhook image tag is v{{< current-version >}} by
../longhorn-website/content//docs/1.4.0/deploy/upgrade/longhorn-manager.md:115:    - It indicates Helm uses the previously configured image tag value if the image tag is different than expected, i.e. v{{< current-version >}}. Then, you need to reset the values by `--reset-values`.
../longhorn-website/content//docs/1.4.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.0/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.4.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.4.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.4.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.4.0/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.4.1/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.4.1/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.4.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.4.1/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.1/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.4.1/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.4.1/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.4.1/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.4.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.1/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.1/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.4.1/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.1/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.4.1/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.4.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.4.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.4.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.4.1/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.4.1/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.1/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/1.4.1/deploy/important-notes/index.md:18:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
../longhorn-website/content//docs/1.4.1/deploy/important-notes/index.md:71:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.1/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.4.1/deploy/install/_index.md:162:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.4.1/deploy/install/_index.md:223:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.1/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.1/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.1/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.1/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.4.1/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.4.1/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.1/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:106:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:110:    - Check if the longhorn-conversion-webhook image tag is v{{< current-version >}} by
../longhorn-website/content//docs/1.4.1/deploy/upgrade/longhorn-manager.md:115:    - It indicates Helm uses the previously configured image tag value if the image tag is different than expected, i.e. v{{< current-version >}}. Then, you need to reset the values by `--reset-values`.
../longhorn-website/content//docs/1.4.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.1/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.4.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.4.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.4.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.4.1/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.4.2/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.4.2/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.4.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.4.2/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.2/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.4.2/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.4.2/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.4.2/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.4.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.2/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.2/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.4.2/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.2/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.4.2/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.4.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.4.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.4.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.4.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.4.2/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.2/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/1.4.2/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
../longhorn-website/content//docs/1.4.2/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.2/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.4.2/deploy/install/_index.md:162:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.4.2/deploy/install/_index.md:223:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.2/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.2/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.2/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.2/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.4.2/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.4.2/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.2/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:106:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:110:    - Check if the longhorn-conversion-webhook image tag is v{{< current-version >}} by
../longhorn-website/content//docs/1.4.2/deploy/upgrade/longhorn-manager.md:115:    - It indicates Helm uses the previously configured image tag value if the image tag is different than expected, i.e. v{{< current-version >}}. Then, you need to reset the values by `--reset-values`.
../longhorn-website/content//docs/1.4.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.2/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.4.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.4.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.4.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.4.2/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.4.3/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.4.3/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.4.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.4.3/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.3/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.4.3/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.4.3/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.4.3/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.4.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.3/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.3/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.4.3/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.3/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.4.3/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.4.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.4.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.4.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.4.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.4.3/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.3/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/1.4.3/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
../longhorn-website/content//docs/1.4.3/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.3/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.4.3/deploy/install/_index.md:162:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.4.3/deploy/install/_index.md:223:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.3/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.3/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.3/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.3/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.4.3/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.4.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.3/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:106:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:110:    - Check if the longhorn-conversion-webhook image tag is v{{< current-version >}} by
../longhorn-website/content//docs/1.4.3/deploy/upgrade/longhorn-manager.md:115:    - It indicates Helm uses the previously configured image tag value if the image tag is different than expected, i.e. v{{< current-version >}}. Then, you need to reset the values by `--reset-values`.
../longhorn-website/content//docs/1.4.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.3/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.4.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.4.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.4.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.4.3/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.4.4/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.4.4/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.4.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.4.4/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.4/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.4.4/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.4.4/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.4.4/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.4.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.4/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.4/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.4.4/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.4/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.4.4/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.4.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.4.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.4.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.4.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.4.4/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.4/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/1.4.4/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
../longhorn-website/content//docs/1.4.4/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.4/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.4.4/deploy/install/_index.md:164:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.4.4/deploy/install/_index.md:225:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.4/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.4/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.4/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.4/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.4.4/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.4.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.4/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:106:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:110:    - Check if the longhorn-conversion-webhook image tag is v{{< current-version >}} by
../longhorn-website/content//docs/1.4.4/deploy/upgrade/longhorn-manager.md:115:    - It indicates Helm uses the previously configured image tag value if the image tag is different than expected, i.e. v{{< current-version >}}. Then, you need to reset the values by `--reset-values`.
../longhorn-website/content//docs/1.4.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.4/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.4.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.4.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.4.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.4.4/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.4.5/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.4.5/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.4.5/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.4.5/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.5/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.4.5/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.4.5/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.4.5/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.4.5/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.5/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.4.5/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.4.5/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.5/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.4.5/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.4.5/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.4.5/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.4.5/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.4.5/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.5/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/1.4.5/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
../longhorn-website/content//docs/1.4.5/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.4.5/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.4.5/deploy/install/_index.md:162:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.4.5/deploy/install/_index.md:223:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.5/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.5/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.5/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.4.5/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.4.5/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.4.5/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.4.5/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:106:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:110:    - Check if the longhorn-conversion-webhook image tag is v{{< current-version >}} by
../longhorn-website/content//docs/1.4.5/deploy/upgrade/longhorn-manager.md:115:    - It indicates Helm uses the previously configured image tag value if the image tag is different than expected, i.e. v{{< current-version >}}. Then, you need to reset the values by `--reset-values`.
../longhorn-website/content//docs/1.4.5/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.4.5/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.4.5/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.4.5/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.4.5/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.5/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:18:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:29:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:36:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:40:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:46:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:54:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:61:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:75:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:81:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:86:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.4.5/volumes-and-nodes/volume-size.md:94:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.4.5/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.5.0/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.5.0/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.5.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.5.0/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.0/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.5.0/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.5.0/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.5.0/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.5.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.0/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.0/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.5.0/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.5.0/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.5.0/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.5.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.5.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.5.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.5.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.5.0/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
../longhorn-website/content//docs/1.5.0/deploy/important-notes/index.md:71:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
../longhorn-website/content//docs/1.5.0/deploy/important-notes/index.md:81:The `Disable Replica Rebuild` setting was deprecated and replaced by the [Concurrent Replica Rebuild Per Node Limit](../../references/settings/#concurrent-replica-rebuild-per-node-limit) setting in Longhorn `v1.2.1`. It should already have been ignored in any Longhorn deployment upgrading to Longhorn v{{< current-version >}} and is now removed. To disable replica rebuilding across the cluster, set the `Concurrent Replica Rebuild Per Node Limit` to 0.
../longhorn-website/content//docs/1.5.0/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.5.0/deploy/install/_index.md:164:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.5.0/deploy/install/_index.md:225:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.0/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.0/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.0/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.0/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.5.0/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.5.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:92:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:101:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.0/deploy/upgrade/longhorn-manager.md:141:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.0/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.5.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:234:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.5.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:318:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.5.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:374:You can find an example CIFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/cifs-backupstore.yaml).
../longhorn-website/content//docs/1.5.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.5.0/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.5.0/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
../longhorn-website/content//docs/1.5.0/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
../longhorn-website/content//docs/1.5.0/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
../longhorn-website/content//docs/1.5.0/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
../longhorn-website/content//docs/1.5.0/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
../longhorn-website/content//docs/1.5.0/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
../longhorn-website/content//docs/1.5.0/v2-data-engine/quick-start.md:51:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-spdk-setup.yaml
../longhorn-website/content//docs/1.5.0/v2-data-engine/quick-start.md:112:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nvme-cli-installation.yaml
../longhorn-website/content//docs/1.5.0/v2-data-engine/quick-start.md:160:bash -c "$(curl -sfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh)" -s -s
../longhorn-website/content//docs/1.5.0/v2-data-engine/quick-start.md:278:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/storageclass.yaml
../longhorn-website/content//docs/1.5.0/v2-data-engine/quick-start.md:285:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.1/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.5.1/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.5.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.5.1/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.1/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.5.1/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.5.1/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.5.1/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.5.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.1/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.1/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.5.1/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.5.1/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.5.1/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.5.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.5.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.5.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.5.1/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.5.1/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
../longhorn-website/content//docs/1.5.1/deploy/important-notes/index.md:71:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
../longhorn-website/content//docs/1.5.1/deploy/important-notes/index.md:81:The `Disable Replica Rebuild` setting was deprecated and replaced by the [Concurrent Replica Rebuild Per Node Limit](../../references/settings/#concurrent-replica-rebuild-per-node-limit) setting in Longhorn `v1.2.1`. It should already have been ignored in any Longhorn deployment upgrading to Longhorn v{{< current-version >}} and is now removed. To disable replica rebuilding across the cluster, set the `Concurrent Replica Rebuild Per Node Limit` to 0.
../longhorn-website/content//docs/1.5.1/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.5.1/deploy/install/_index.md:164:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.5.1/deploy/install/_index.md:225:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.1/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.1/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.1/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.1/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.5.1/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.5.1/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.5.1/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:92:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:101:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.1/deploy/upgrade/longhorn-manager.md:141:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
../longhorn-website/content//docs/1.5.1/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.5.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:234:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.5.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:318:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.5.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:374:You can find an example CIFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/cifs-backupstore.yaml).
../longhorn-website/content//docs/1.5.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.5.1/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.5.1/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
../longhorn-website/content//docs/1.5.1/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
../longhorn-website/content//docs/1.5.1/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
../longhorn-website/content//docs/1.5.1/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
../longhorn-website/content//docs/1.5.1/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
../longhorn-website/content//docs/1.5.1/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
../longhorn-website/content//docs/1.5.1/v2-data-engine/quick-start.md:51:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-spdk-setup.yaml
../longhorn-website/content//docs/1.5.1/v2-data-engine/quick-start.md:112:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nvme-cli-installation.yaml
../longhorn-website/content//docs/1.5.1/v2-data-engine/quick-start.md:160:bash -c "$(curl -sfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh)" -s -s
../longhorn-website/content//docs/1.5.1/v2-data-engine/quick-start.md:278:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/storageclass.yaml
../longhorn-website/content//docs/1.5.1/v2-data-engine/quick-start.md:285:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.2/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.5.2/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.5.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.5.2/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.2/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.5.2/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.5.2/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.5.2/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.5.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.2/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.2/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.5.2/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.5.2/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.5.2/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.5.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.5.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.5.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.5.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.5.2/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
../longhorn-website/content//docs/1.5.2/deploy/important-notes/index.md:28:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.2/deploy/important-notes/index.md:82:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
../longhorn-website/content//docs/1.5.2/deploy/important-notes/index.md:92:The `Disable Replica Rebuild` setting was deprecated and replaced by the [Concurrent Replica Rebuild Per Node Limit](../../references/settings/#concurrent-replica-rebuild-per-node-limit) setting in Longhorn `v1.2.1`. It should already have been ignored in any Longhorn deployment upgrading to Longhorn v{{< current-version >}} and is now removed. To disable replica rebuilding across the cluster, set the `Concurrent Replica Rebuild Per Node Limit` to 0.
../longhorn-website/content//docs/1.5.2/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.5.2/deploy/install/_index.md:166:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.5.2/deploy/install/_index.md:227:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.2/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.2/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.2/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.2/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.5.2/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.5.2/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.5.2/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:92:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:101:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.2/deploy/upgrade/longhorn-manager.md:141:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
../longhorn-website/content//docs/1.5.2/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.5.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:234:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.5.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:318:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.5.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:374:You can find an example CIFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/cifs-backupstore.yaml).
../longhorn-website/content//docs/1.5.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.5.2/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.5.2/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
../longhorn-website/content//docs/1.5.2/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
../longhorn-website/content//docs/1.5.2/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
../longhorn-website/content//docs/1.5.2/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
../longhorn-website/content//docs/1.5.2/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
../longhorn-website/content//docs/1.5.2/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
../longhorn-website/content//docs/1.5.2/v2-data-engine/quick-start.md:51:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-spdk-setup.yaml
../longhorn-website/content//docs/1.5.2/v2-data-engine/quick-start.md:83:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nvme-cli-installation.yaml
../longhorn-website/content//docs/1.5.2/v2-data-engine/quick-start.md:108:bash -c "$(curl -sfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh)" -s -s
../longhorn-website/content//docs/1.5.2/v2-data-engine/quick-start.md:226:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/storageclass.yaml
../longhorn-website/content//docs/1.5.2/v2-data-engine/quick-start.md:233:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.3/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.5.3/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.5.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.5.3/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.3/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.5.3/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.5.3/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.5.3/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.5.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.3/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.3/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.5.3/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.5.3/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.5.3/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.5.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.5.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.5.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.5.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.5.3/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
../longhorn-website/content//docs/1.5.3/deploy/important-notes/index.md:28:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.3/deploy/important-notes/index.md:82:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
../longhorn-website/content//docs/1.5.3/deploy/important-notes/index.md:92:The `Disable Replica Rebuild` setting was deprecated and replaced by the [Concurrent Replica Rebuild Per Node Limit](../../references/settings/#concurrent-replica-rebuild-per-node-limit) setting in Longhorn `v1.2.1`. It should already have been ignored in any Longhorn deployment upgrading to Longhorn v{{< current-version >}} and is now removed. To disable replica rebuilding across the cluster, set the `Concurrent Replica Rebuild Per Node Limit` to 0.
../longhorn-website/content//docs/1.5.3/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.5.3/deploy/install/_index.md:166:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.5.3/deploy/install/_index.md:227:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.3/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.3/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.3/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.3/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.5.3/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.5.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.5.3/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:92:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:101:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.3/deploy/upgrade/longhorn-manager.md:141:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
../longhorn-website/content//docs/1.5.3/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.5.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:234:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.5.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:318:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.5.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:374:You can find an example CIFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/cifs-backupstore.yaml).
../longhorn-website/content//docs/1.5.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.5.3/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.5.3/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
../longhorn-website/content//docs/1.5.3/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
../longhorn-website/content//docs/1.5.3/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
../longhorn-website/content//docs/1.5.3/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
../longhorn-website/content//docs/1.5.3/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
../longhorn-website/content//docs/1.5.3/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
../longhorn-website/content//docs/1.5.3/v2-data-engine/quick-start.md:51:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-spdk-setup.yaml
../longhorn-website/content//docs/1.5.3/v2-data-engine/quick-start.md:83:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nvme-cli-installation.yaml
../longhorn-website/content//docs/1.5.3/v2-data-engine/quick-start.md:108:bash -c "$(curl -sfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh)" -s -s
../longhorn-website/content//docs/1.5.3/v2-data-engine/quick-start.md:226:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/storageclass.yaml
../longhorn-website/content//docs/1.5.3/v2-data-engine/quick-start.md:233:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.4/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.5.4/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.5.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.5.4/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.4/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.5.4/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.5.4/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.5.4/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.5.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.4/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.5.4/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.5.4/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.5.4/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.5.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.5.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.5.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.5.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.5.4/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
../longhorn-website/content//docs/1.5.4/deploy/important-notes/index.md:28:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.4/deploy/important-notes/index.md:98:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
../longhorn-website/content//docs/1.5.4/deploy/important-notes/index.md:108:The `Disable Replica Rebuild` setting was deprecated and replaced by the [Concurrent Replica Rebuild Per Node Limit](../../references/settings/#concurrent-replica-rebuild-per-node-limit) setting in Longhorn `v1.2.1`. It should already have been ignored in any Longhorn deployment upgrading to Longhorn v{{< current-version >}} and is now removed. To disable replica rebuilding across the cluster, set the `Concurrent Replica Rebuild Per Node Limit` to 0.
../longhorn-website/content//docs/1.5.4/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.5.4/deploy/install/_index.md:166:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.5.4/deploy/install/_index.md:227:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.4/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.4/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.4/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.5.4/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.5.4/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.5.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.5.4/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:92:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:101:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.5.4/deploy/upgrade/longhorn-manager.md:141:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
../longhorn-website/content//docs/1.5.4/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.5.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:234:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.5.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:318:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.5.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:374:You can find an example CIFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/cifs-backupstore.yaml).
../longhorn-website/content//docs/1.5.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
../longhorn-website/content//docs/1.5.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:18:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:29:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:36:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:40:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:46:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:54:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:61:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:75:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:81:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:86:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.5.4/volumes-and-nodes/volume-size.md:94:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.5.4/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.5.4/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
../longhorn-website/content//docs/1.5.4/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
../longhorn-website/content//docs/1.5.4/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
../longhorn-website/content//docs/1.5.4/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
../longhorn-website/content//docs/1.5.4/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
../longhorn-website/content//docs/1.5.4/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
../longhorn-website/content//docs/1.5.4/v2-data-engine/quick-start.md:51:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-spdk-setup.yaml
../longhorn-website/content//docs/1.5.4/v2-data-engine/quick-start.md:83:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nvme-cli-installation.yaml
../longhorn-website/content//docs/1.5.4/v2-data-engine/quick-start.md:108:bash -c "$(curl -sfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh)" -s -s
../longhorn-website/content//docs/1.5.4/v2-data-engine/quick-start.md:226:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/storageclass.yaml
../longhorn-website/content//docs/1.5.4/v2-data-engine/quick-start.md:233:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/pod_with_pvc.yaml
../longhorn-website/content//docs/1.6.0/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/1.6.0/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/1.6.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/1.6.0/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/1.6.0/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/1.6.0/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/1.6.0/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/1.6.0/advanced-resources/deploy/airgap.md:345:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/1.6.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.6.0/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/1.6.0/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
../longhorn-website/content//docs/1.6.0/advanced-resources/rwx-workloads.md:32:    > **Tip:** The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
../longhorn-website/content//docs/1.6.0/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
../longhorn-website/content//docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
../longhorn-website/content//docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
../longhorn-website/content//docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
../longhorn-website/content//docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:52:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_ssd_perf.png" >}}
../longhorn-website/content//docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:56:        {{< figure src="/img/diagrams/snapshot/snapshot_hash_hdd_perf.png" >}}
../longhorn-website/content//docs/1.6.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/1.6.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/1.6.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.6.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/1.6.0/deploy/important-notes/index.md:29:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
../longhorn-website/content//docs/1.6.0/deploy/important-notes/index.md:40:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
../longhorn-website/content//docs/1.6.0/deploy/important-notes/index.md:107:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
../longhorn-website/content//docs/1.6.0/deploy/important-notes/index.md:113:Beginning with version v1.6.0, Longhorn is implementing mandatory engine upgrades. See the [release note](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for information about the minimum supported engine image version.
../longhorn-website/content//docs/1.6.0/deploy/install/_index.md:65:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/1.6.0/deploy/install/_index.md:172:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/1.6.0/deploy/install/_index.md:235:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-argocd.md:18:> Use [this script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-fleet.md:19:> Use [this script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-flux.md:25:> Use [this script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-helm.md:38:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:24:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:26:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:33:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:35:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/install/install-with-rancher.md:37:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/uninstall/_index.md:42:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.6.0/deploy/uninstall/_index.md:48:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.6.0/deploy/uninstall/_index.md:62:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.6.0/deploy/uninstall/_index.md:63:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/1.6.0/deploy/uninstall/_index.md:66:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/1.6.0/deploy/uninstall/_index.md:67:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/1.6.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:92:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:101:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/1.6.0/deploy/upgrade/longhorn-manager.md:141:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.6.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x to v{{< current-version >}}.
../longhorn-website/content//docs/1.6.0/references/storage-class-parameters.md:229:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
../longhorn-website/content//docs/1.6.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:234:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/1.6.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:318:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/1.6.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:374:You can find an example CIFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/cifs-backupstore.yaml).
../longhorn-website/content//docs/1.6.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
../longhorn-website/content//docs/1.6.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/create-volumes.md:58:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/storage-tags.md:57:If Longhorn is installed via Helm, you can achieve that by editing `persistence.defaultNodeSelector` in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:18:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:29:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:36:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:40:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:46:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:54:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:61:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:75:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:81:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:86:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/1.6.0/volumes-and-nodes/volume-size.md:94:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/1.6.0/best-practices.md:54:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/1.6.0/best-practices.md:70:We recommend running your Kubernetes cluster on one of the following versions. These versions are the active supported versions prior to the Longhorn release, and have been tested with Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/1.6.0/v2-data-engine/performance.md:22:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
../longhorn-website/content//docs/1.6.0/v2-data-engine/performance.md:24:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
../longhorn-website/content//docs/1.6.0/v2-data-engine/performance.md:26:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
../longhorn-website/content//docs/1.6.0/v2-data-engine/performance.md:39:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
../longhorn-website/content//docs/1.6.0/v2-data-engine/performance.md:41:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
../longhorn-website/content//docs/1.6.0/v2-data-engine/performance.md:43:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
../longhorn-website/content//docs/1.6.0/v2-data-engine/quick-start.md:51:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-spdk-setup.yaml
../longhorn-website/content//docs/1.6.0/v2-data-engine/quick-start.md:85:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nvme-cli-installation.yaml
../longhorn-website/content//docs/1.6.0/v2-data-engine/quick-start.md:110:bash -c "$(curl -sfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh)" -s -s
../longhorn-website/content//docs/1.6.0/v2-data-engine/quick-start.md:225:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/storageclass.yaml
../longhorn-website/content//docs/1.6.0/v2-data-engine/quick-start.md:232:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/v2/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/0.8.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/0.8.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/0.8.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/0.8.0/getting-started/quick-start-with-helm.md:93:{{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/install-with-helm.md:82:{{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/install-with-kubectl.md:12:kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/0.8.0/install/install-with-rancher.md:31:{{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/install-with-rancher.md:33:{{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/install-with-rancher.md:35:{{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/install-with-rancher.md:38:{{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/install-with-rancher.md:40:{{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/install-with-rancher.md:42:{{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/0.8.0/install/uninstall-longhorn.md:12:  kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/0.8.0/install/uninstall-longhorn.md:18:$ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/0.8.0/install/uninstall-longhorn.md:33:  kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/0.8.0/install/uninstall-longhorn.md:34:  kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/0.8.0/install/uninstall-longhorn.md:37:Tip: If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there, 
../longhorn-website/content//docs/archives/0.8.0/install/uninstall-longhorn.md:38:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/0.8.0/install/upgrades.md:18:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/0.8.0/install/upgrades.md:116:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml
../longhorn-website/content//docs/archives/0.8.0/users-guide/backup-and-restore/backupstores-and-backuptargets.md:79:kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/0.8.0/users-guide/backup-and-restore/backupstores-and-backuptargets.md:120:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/0.8.0/users-guide/create-volumes.md:10:kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/0.8.0/users-guide/create-volumes.md:15:kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pvc.yaml
../longhorn-website/content//docs/archives/0.8.0/users-guide/distribution-specific-notes/csi-on-k3s.md:33:You can override the root-dir detection by setting argument `kubelet-root-dir` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/0.8.0/users-guide/distribution-specific-notes/csi-on-rke-and-coreos.md:53:You can override the root-dir detection by setting argument `kubelet-root-dir` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/0.8.0/users-guide/deploy-with-kubernetes.md:9:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/0.8.1/advanced-resources/deploy/airgap.md:19:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/0.8.1/advanced-resources/os-distro-specific/csi-on-k3s.md:35:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/0.8.1/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/0.8.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/0.8.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/0.8.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/accessing-the-ui/_index.md:51:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/install/_index.md:45:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/0.8.1/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/0.8.1/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/0.8.1/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/0.8.1/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/0.8.1/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there, 
../longhorn-website/content//docs/archives/0.8.1/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/0.8.1/deploy/upgrade/longhorn-manager.md:17:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/0.8.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:80:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/0.8.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:131:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/0.8.1/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/0.8.1/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.0.0/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.0.0/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.0.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.0.0/advanced-resources/deploy/airgap.md:19:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.0.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by manually setting environment `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.0.0/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.0.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.0.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.0.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/install/_index.md:50:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.0.0/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.0/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.0/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.0/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.0/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there, 
../longhorn-website/content//docs/archives/1.0.0/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.0.0/deploy/upgrade/longhorn-manager.md:71:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.0/references/settings.md:62:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.0/references/settings.md:69:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.0/references/settings.md:79:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:85:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.0.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:136:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.0.0/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.0.0/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/deploy/airgap.md:38:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-01.png" >}}
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/rwx-workloads.md:16:- [01-security.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/rwx/01-security.yaml)
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/rwx-workloads.md:17:- [02-longhorn-nfs-provisioner.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/rwx/02-longhorn-nfs-provisioner.yaml)
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/rwx-workloads.md:18:- [03-rwx-test.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/rwx/03-rwx-test.yaml)
../longhorn-website/content//docs/archives/1.0.1/advanced-resources/rwx-workloads.md:37:{{< figure src="/img/diagrams/rwx/rwx-02.png" >}}
../longhorn-website/content//docs/archives/1.0.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.0.1/concepts.md:167:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.0.1/concepts.md:294:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/install/_index.md:50:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.0.1/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.1/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.1/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.1/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.1/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there, 
../longhorn-website/content//docs/archives/1.0.1/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.0.1/deploy/upgrade/longhorn-manager.md:31:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.1/references/settings.md:63:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.1/references/settings.md:70:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.1/references/settings.md:80:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:100:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.0.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.0.1/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-01.png" >}}
../longhorn-website/content//docs/archives/1.0.2/advanced-resources/rwx-workloads.md:37:{{< figure src="/img/diagrams/rwx/rwx-02.png" >}}
../longhorn-website/content//docs/archives/1.0.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.0.2/concepts.md:167:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.0.2/concepts.md:294:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/install/_index.md:56:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.0.2/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.2/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.2/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.2/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.0.2/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.0.2/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.0.2/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.0.2/references/settings.md:63:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.2/references/settings.md:70:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.2/references/settings.md:80:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.0.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:104:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.0.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:179:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.0.2/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/deploy/airgap.md:348:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.0/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.1.0/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.1.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.1.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.1.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/install/_index.md:56:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.1.0/deploy/install/_index.md:122:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/iscsi/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.0/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.0/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.0/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.0/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.1.0/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.0.x. For other versions, please upgrade to v1.0.x first.
../longhorn-website/content//docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.0.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:41:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:90:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.0/references/settings.md:75:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.1.0/references/settings.md:82:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.1.0/references/settings.md:92:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
../longhorn-website/content//docs/archives/1.1.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:108:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.1.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:183:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.1.0/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/deploy/airgap.md:348:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.1.1/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.1.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.1.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.1.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/_index.md:56:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.1.1/deploy/install/_index.md:122:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/install/_index.md:178:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.1.1/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.0. For other versions, please upgrade to v1.1.0 first.
../longhorn-website/content//docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.0 to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:41:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:95:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.1.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.1.1/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/deploy/airgap.md:348:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.1.2/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.1.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.1.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.1.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/_index.md:56:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.1.2/deploy/install/_index.md:122:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/install/_index.md:178:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-helm.md:48:    helm install longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.1.2/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:41:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:95:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.2/deploy/upgrade/upgrade-engine.md:36:Live upgrade is supported for upgrading from v1.1.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.1.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.1.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.1.2/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.1.3/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.1.3/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.1.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.1.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.1.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/_index.md:56:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.1.3/deploy/install/_index.md:122:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/install/_index.md:178:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-helm.md:48:    helm install longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.1.3/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:41:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:95:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.3/deploy/upgrade/upgrade-engine.md:36:Live upgrade is supported for upgrading from v1.1.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.1.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.1.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/create-volumes.md:47:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.1.3/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.0/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.2.0/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.2.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.2.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.2.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.2.0/deploy/install/_index.md:124:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/install/_index.md:180:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-helm.md:48:    helm install longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.2.0/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:41:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:95:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.2.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.2.0/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.2.1/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.2.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.2.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.2.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.2.1/deploy/install/_index.md:124:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/install/_index.md:180:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-helm.md:48:    helm install longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/select-project.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-rancher.md:28:    {{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.2.1/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.0. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.0 to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:41:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:95:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.0 to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.2.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.2.1/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.2.2/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.2.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.2.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.2.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.2.2/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.2/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.2.2/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.2.2/deploy/install/_index.md:124:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/install/_index.md:180:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-kubectl.md:20:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.2.2/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:35:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:41:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:95:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.2.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.2.2/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.3/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.2.3/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.2.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.2.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.2.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.2.3/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.3/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.2.3/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.2.3/deploy/install/_index.md:163:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/install/_index.md:219:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.2.3/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.2.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
../longhorn-website/content//docs/archives/1.2.3/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.4/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.2.4/best-practices.md:30:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.2.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.2.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.2.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.2.4/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.4/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.2.4/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
../longhorn-website/content//docs/archives/1.2.4/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.2.4/deploy/install/_index.md:163:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/install/_index.md:219:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.2.4/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.2.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.2.4/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.5/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.2.5/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.2.5/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.2.5/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.2.5/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.5/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.2.5/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.5/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.2.5/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.2.5/deploy/install/_index.md:132:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/install/_index.md:188:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.2.5/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.5/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.5/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.2.5/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/archives/1.2.5/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.2.6/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.2.6/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
../longhorn-website/content//docs/archives/1.2.6/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.2.6/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.2.6/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.6/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.2.6/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.6/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.2.6/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.2.6/deploy/install/_index.md:132:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/install/_index.md:188:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.2.6/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.6/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.2.6/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.2.6/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/archives/1.2.6/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.0/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.3.0/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/archives/1.3.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.3.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.3.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.3.0/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.0/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.3.0/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
../longhorn-website/content//docs/archives/1.3.0/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.3.0/deploy/install/_index.md:160:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/install/_index.md:220:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-helm.md:15:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-helm.md:40:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-helm.md:46:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.3.0/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.2.x. For other versions, please upgrade to v1.2.x first.
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:49:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:57:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:106:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:110:    - Check if the longhorn-conversion-webhook image tag is v{{< current-version >}} by
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:115:    - It indicates Helm uses the previously configured image tag value if the image tag is different than expected, i.e. v{{< current-version >}}. Then, you need to reset the values by `--reset-values`.
../longhorn-website/content//docs/archives/1.3.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.3.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/archives/1.3.0/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.3.1/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/archives/1.3.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.3.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.3.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.1/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.3.1/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.1/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.3.1/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
../longhorn-website/content//docs/archives/1.3.1/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.3.1/deploy/install/_index.md:160:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/install/_index.md:220:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.3.1/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.3.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/archives/1.3.1/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/data-recovery/recover-without-system.md:28:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/data-recovery/recover-without-system.md:47:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.3.2/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/archives/1.3.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.3.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.3.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.3.2/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.2/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.3.2/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
../longhorn-website/content//docs/archives/1.3.2/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.3.2/deploy/install/_index.md:160:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/install/_index.md:220:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.3.2/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.3.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/archives/1.3.2/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.3/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.3.3/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/archives/1.3.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.3.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.3.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.3.3/deploy/important-notes/index.md:11:2. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.3/deploy/important-notes/index.md:12:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.3.3/deploy/important-notes/index.md:13:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
../longhorn-website/content//docs/archives/1.3.3/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.3.3/deploy/install/_index.md:160:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/install/_index.md:220:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.3.3/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.3.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/archives/1.3.3/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/data-recovery/export-from-replica.md:63:   docker run -v /dev:/host/dev -v /proc:/host/proc -v <data_path>:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn <volume_name> <volume_size>
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/data-recovery/export-from-replica.md:69:   docker run -v /dev:/host/dev -v /proc:/host/proc -v /var/lib/longhorn/replicas/pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc-d890efb2:/volume --privileged longhornio/longhorn-engine:v{{< current-version >}} launch-simple-longhorn pvc-06b4a8a8-b51d-42c6-a8cc-d8c8d6bc65bc 1073741824
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/data-recovery/recover-without-system.md:26:7. Set argument `longhorn-version` by replacing `<LONGHORN_VERSION>`, e.g. `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/data-recovery/recover-without-system.md:30:    - The credential secret can be referenced [here](https://longhorn.io/docs/{{< current-version >}}/snapshots-and-backups/backup-and-restore/set-backup-target/#set-up-aws-s3-backupstore) and must be created in the `longhorn-system' namespace.
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/data-recovery/recover-without-system.md:49:  - `--version`: Specifies the version of Longhorn to use. e.g., `v{{< current-version >}}`
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:21:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:25:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:31:    wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:45:    `wget https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml`
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/deploy/airgap.md:350:The images of Longhorn's components are hosted in Dockerhub under the `longhornio` account. For example, `longhornio/longhorn-manager:v{{< current-version >}}`. It's recommended to keep the account name, `longhornio`, the same when you push the images to your private registry. This helps avoid unnecessary configuration issues.
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/os-distro-specific/csi-on-rke-and-coreos.md:67:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
../longhorn-website/content//docs/archives/1.3.4/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
../longhorn-website/content//docs/archives/1.3.4/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
../longhorn-website/content//docs/archives/1.3.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
../longhorn-website/content//docs/archives/1.3.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
../longhorn-website/content//docs/archives/1.3.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/accessing-the-ui/_index.md:41:    {{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
../longhorn-website/content//docs/archives/1.3.4/deploy/important-notes/index.md:11:2. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.4/deploy/important-notes/index.md:12:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
../longhorn-website/content//docs/archives/1.3.4/deploy/important-notes/index.md:13:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
../longhorn-website/content//docs/archives/1.3.4/deploy/install/_index.md:58:curl -sSfL https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh | bash
../longhorn-website/content//docs/archives/1.3.4/deploy/install/_index.md:162:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-iscsi-installation.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/install/_index.md:222:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/prerequisite/longhorn-nfs-installation.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-helm.md:41:    helm install longhorn/longhorn --name longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-helm.md:47:    helm install longhorn longhorn/longhorn --namespace longhorn-system --create-namespace --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-kubectl.md:20:    kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:21:    {{< figure src="/img/screenshots/install/rancher-2.6/select-project.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:23:    {{< figure src="/img/screenshots/install/rancher-2.6/apps-launch.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:25:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:27:    {{< figure src="/img/screenshots/install/rancher-2.6/longhorn-chart.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:30:    {{< figure src="/img/screenshots/install/rancher-2.6/launch-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:32:    {{< figure src="/img/screenshots/install/rancher-2.6/installed-longhorn.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/install/install-with-rancher.md:34:    {{< figure src="/img/screenshots/install/rancher-2.6/dashboard.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/uninstall/_index.md:36:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/uninstall/_index.md:42:    $ kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/uninstall/_index.md:57:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/uninstall/_index.md:58:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/uninstall/_index.md:61:> **Tip:** If you try `kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml` first and get stuck there,
../longhorn-website/content//docs/archives/1.3.4/deploy/uninstall/_index.md:62:pressing `Ctrl C` then running `kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/uninstall/uninstall.yaml` can also help you remove Longhorn. Finally, don't forget to cleanup remaining components.
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:14:For example, the image `registry.example.com/longhorn/longhorn-manager:v{{< current-version >}}` is changed to `longhorn/longhorn-manager:v{{< current-version >}}` in Longhorn images section. For more information, see the air gap installation steps [here.](../../../advanced-resources/deploy/airgap/#using-a-rancher-app)
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:47:kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:55:helm upgrade longhorn longhorn/longhorn --namespace longhorn-system --version {{< current-version >}}
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:109:    kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
../longhorn-website/content//docs/archives/1.3.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:173:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/backupstores/minio-backupstore.yaml
../longhorn-website/content//docs/archives/1.3.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/create-volumes.md:21:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/storageclass.yaml
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/create-volumes.md:54:    kubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/examples/pod_with_pvc.yaml
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
../longhorn-website/content//docs/archives/1.3.4/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
../longhorn-website/content//kb/analysis-filesystem-corrupted-issues-due-to-error-on-cow-while-rebuilding-replicas.md:46:{{< figure src="/img/kb/analysis-filesystem-corrupted-issues-due-to-error-on-cow-while-rebuilding-replicas/data-corruption-illustration.png" >}}
../longhorn-website/content//kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:21:{{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-chart-in-old-rancher-ui.png" >}}
../longhorn-website/content//kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:29:{{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-installation-in-legacy-ui.png" >}}
../longhorn-website/content//kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:33:{{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-chart-in-new-ui.png" >}}
../longhorn-website/content//kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:173:   {{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-installation-in-legacy-ui.png" >}}
