content/blog/kubecon-eu-2020.md:14:{{< figure src="/img/blogs/kubecon-eu-2020/booth.png" >}}
content/blog/kubecon-eu-2020.md:47:{{< figure src="/img/blogs/kubecon-eu-2020/tshirt.png" >}}
content/blog/kubecon-na-2020.md:22:{{< figure src="/img/blogs/kubecon-na-2020/booth.png" >}}
content/blog/kubecon-na-2020.md:50:{{< figure src="/img/blogs/kubecon-eu-2020/tshirt.png" >}}
content/blog/kubecon-na-2021.md:27:{{< figure src="/img/blogs/kubecon-eu-2020/tshirt.png" >}}
content/blog/performance-scalability-report-aug-2020.md:55:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/bandwidth.png" >}}
content/blog/performance-scalability-report-aug-2020.md:67:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/iops.png" >}}
content/blog/performance-scalability-report-aug-2020.md:69:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/latency.png" >}}
content/blog/performance-scalability-report-aug-2020.md:114:{{< figure src="/img/blogs/performance-scalability-report-aug-2018/scalability.png" >}}
content/docs/1.4.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.4.0/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.4.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.4.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.4.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.4.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.4.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.4.0/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.4.0/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.4.0/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.4.0/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.4.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.4.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.4.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.4.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.4.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.4.0/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
content/docs/1.4.0/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/1.4.0/deploy/important-notes/index.md:18:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
content/docs/1.4.0/deploy/important-notes/index.md:71:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
content/docs/1.4.0/deploy/install/install-with-helm.md:15:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.0/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.4.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.4.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x. For other versions, please upgrade to v1.3.x first.
content/docs/1.4.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x to v{{< current-version >}}.
content/docs/1.4.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.4.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.4.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x to v{{< current-version >}}.
content/docs/1.4.0/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.4.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/1.4.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.4.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.4.0/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.4.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.4.1/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.4.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.4.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.4.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.4.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.4.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.4.1/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.4.1/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.4.1/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.4.1/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.4.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.4.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.4.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.4.1/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.4.1/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.4.1/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
content/docs/1.4.1/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/1.4.1/deploy/important-notes/index.md:18:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
content/docs/1.4.1/deploy/important-notes/index.md:71:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
content/docs/1.4.1/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.1/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.4.1/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.4.1/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
content/docs/1.4.1/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
content/docs/1.4.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
content/docs/1.4.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
content/docs/1.4.1/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.4.1/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.4.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
content/docs/1.4.1/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.4.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/1.4.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.4.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.4.1/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.4.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.4.2/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.4.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.4.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.4.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.4.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.4.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.4.2/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.4.2/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.4.2/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.4.2/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.4.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.4.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.4.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.4.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.4.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.4.2/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
content/docs/1.4.2/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/1.4.2/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
content/docs/1.4.2/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
content/docs/1.4.2/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.2/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.4.2/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.4.2/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
content/docs/1.4.2/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
content/docs/1.4.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
content/docs/1.4.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
content/docs/1.4.2/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.4.2/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.4.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
content/docs/1.4.2/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.4.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/1.4.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.4.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.4.2/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.4.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.4.3/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.4.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.4.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.4.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.4.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.4.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.4.3/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.4.3/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.4.3/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.4.3/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.4.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.4.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.4.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.4.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.4.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.4.3/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
content/docs/1.4.3/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/1.4.3/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
content/docs/1.4.3/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
content/docs/1.4.3/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.3/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.4.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.4.3/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
content/docs/1.4.3/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
content/docs/1.4.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
content/docs/1.4.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
content/docs/1.4.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.4.3/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.4.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
content/docs/1.4.3/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.4.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/1.4.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.4.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.4.3/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.4.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.4.4/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.4.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.4.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.4.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.4.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.4.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.4.4/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.4.4/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.4.4/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.4.4/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.4.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.4.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.4.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.4.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.4.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.4.4/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
content/docs/1.4.4/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/1.4.4/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
content/docs/1.4.4/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
content/docs/1.4.4/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.4/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.4.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.4.4/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
content/docs/1.4.4/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
content/docs/1.4.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
content/docs/1.4.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
content/docs/1.4.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.4.4/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.4.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
content/docs/1.4.4/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.4.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/1.4.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.4.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.4.4/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.4.5/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.4.5/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.4.5/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.4.5/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.4.5/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.4.5/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.4.5/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.4.5/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.4.5/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.4.5/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.4.5/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.4.5/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.4.5/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.4.5/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.4.5/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.4.5/deploy/important-notes/index.md:12:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated in v{{< current-version >}}.
content/docs/1.4.5/deploy/important-notes/index.md:15:After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/1.4.5/deploy/important-notes/index.md:20:When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890).
content/docs/1.4.5/deploy/important-notes/index.md:73:Longhorn has a dedicated recovery backend service for NFS servers in the share-manager pods used by the RWX volumes. The clients' information, including its hostname, will be stored in the recovery backend. The information will be used for connection recovery if the share-manager pod is abnormally terminated and a new one is created. The [environment check script](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/environment_check.sh) helps users to check all nodes have unique hostnames.
content/docs/1.4.5/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.5/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.5/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.4.5/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.4.5/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.4.5/deploy/upgrade/_index.md:18:- To upgrade from v1.4.x (< v{{< current-version >}}) or v1.3.x, see [this section.](./longhorn-manager)
content/docs/1.4.5/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x
content/docs/1.4.5/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x or v1.3.x. For other versions, please upgrade to v1.4.x or v1.3.x first.
content/docs/1.4.5/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x or v1.3.x to v{{< current-version >}}.
content/docs/1.4.5/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.4.5/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.4.5/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x (< v{{< current-version >}}) or v1.3.x to v{{< current-version >}}.
content/docs/1.4.5/references/storage-class-parameters.md:210:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.4.5/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/1.4.5/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.5/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v5.0.1
content/docs/1.4.5/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.4.5/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:18:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:29:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:36:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:40:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:46:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:54:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:61:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:75:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:81:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:86:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.4.5/volumes-and-nodes/volume-size.md:94:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.4.5/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.5.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.5.0/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.5.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.5.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.5.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.5.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.5.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.5.0/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.5.0/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.5.0/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.5.0/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.5.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.5.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.5.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.5.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.5.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.5.0/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
content/docs/1.5.0/deploy/important-notes/index.md:71:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
content/docs/1.5.0/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.0/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.5.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.5.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
content/docs/1.5.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
content/docs/1.5.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.5.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.5.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x to v{{< current-version >}}.
content/docs/1.5.0/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.5.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.5.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.5.0/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.5.0/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
content/docs/1.5.0/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
content/docs/1.5.0/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
content/docs/1.5.0/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
content/docs/1.5.0/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
content/docs/1.5.0/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
content/docs/1.5.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.5.1/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.5.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.5.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.5.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.5.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.5.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.5.1/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.5.1/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.5.1/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.5.1/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.5.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.5.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.5.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.5.1/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.5.1/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.5.1/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
content/docs/1.5.1/deploy/important-notes/index.md:71:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
content/docs/1.5.1/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.1/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.5.1/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.5.1/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
content/docs/1.5.1/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
content/docs/1.5.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
content/docs/1.5.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
content/docs/1.5.1/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.5.1/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.5.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
content/docs/1.5.1/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.5.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.1/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.5.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.5.1/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.5.1/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
content/docs/1.5.1/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
content/docs/1.5.1/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
content/docs/1.5.1/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
content/docs/1.5.1/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
content/docs/1.5.1/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
content/docs/1.5.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.5.2/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.5.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.5.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.5.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.5.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.5.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.5.2/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.5.2/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.5.2/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.5.2/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.5.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.5.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.5.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.5.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.5.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.5.2/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
content/docs/1.5.2/deploy/important-notes/index.md:28:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
content/docs/1.5.2/deploy/important-notes/index.md:82:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
content/docs/1.5.2/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.2/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.5.2/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.5.2/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
content/docs/1.5.2/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
content/docs/1.5.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
content/docs/1.5.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
content/docs/1.5.2/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.5.2/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.5.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
content/docs/1.5.2/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.5.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.2/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.5.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.5.2/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.5.2/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
content/docs/1.5.2/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
content/docs/1.5.2/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
content/docs/1.5.2/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
content/docs/1.5.2/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
content/docs/1.5.2/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
content/docs/1.5.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.5.3/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.5.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.5.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.5.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.5.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.5.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.5.3/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.5.3/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.5.3/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.5.3/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.5.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.5.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.5.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.5.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.5.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.5.3/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
content/docs/1.5.3/deploy/important-notes/index.md:28:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
content/docs/1.5.3/deploy/important-notes/index.md:82:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
content/docs/1.5.3/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.3/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.5.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.5.3/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
content/docs/1.5.3/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
content/docs/1.5.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
content/docs/1.5.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
content/docs/1.5.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.5.3/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.5.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
content/docs/1.5.3/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.5.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.3/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.2.1
content/docs/1.5.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.5.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.5.3/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.5.3/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
content/docs/1.5.3/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
content/docs/1.5.3/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
content/docs/1.5.3/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
content/docs/1.5.3/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
content/docs/1.5.3/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
content/docs/1.5.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.5.4/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.5.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.5.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.5.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.5.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.5.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.5.4/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.5.4/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.5.4/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.5.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.5.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.5.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.5.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.5.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.5.4/deploy/important-notes/index.md:13:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
content/docs/1.5.4/deploy/important-notes/index.md:28:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
content/docs/1.5.4/deploy/important-notes/index.md:98:The CSI components in Longhorn v{{< current-version >}} only function with the `v1` version.
content/docs/1.5.4/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.5.4/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.5.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.5.4/deploy/upgrade/_index.md:39:- To upgrade from v1.5.x (< v{{< current-version >}}) or v1.4.x, see [this section.](./longhorn-manager)
content/docs/1.5.4/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x
content/docs/1.5.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
content/docs/1.5.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
content/docs/1.5.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.5.4/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.5.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.5.x (< v{{< current-version >}}) or v1.4.x.
content/docs/1.5.4/references/storage-class-parameters.md:219:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.5.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
content/docs/1.5.4/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
content/docs/1.5.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.5.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:18:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:29:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:36:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:40:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:46:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:54:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:61:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:75:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:81:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:86:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.5.4/volumes-and-nodes/volume-size.md:94:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.5.4/best-practices.md:47:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.5.4/v2-data-engine/performance-benchmark.md:21:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
content/docs/1.5.4/v2-data-engine/performance-benchmark.md:23:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
content/docs/1.5.4/v2-data-engine/performance-benchmark.md:25:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
content/docs/1.5.4/v2-data-engine/performance-benchmark.md:38:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
content/docs/1.5.4/v2-data-engine/performance-benchmark.md:40:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
content/docs/1.5.4/v2-data-engine/performance-benchmark.md:42:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
content/docs/1.6.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/1.6.0/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/1.6.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/1.6.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/1.6.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/1.6.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/1.6.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/1.6.0/advanced-resources/rwx-workloads.md:13:{{< figure src="/img/diagrams/rwx/rwx-arch.png" >}}
content/docs/1.6.0/advanced-resources/fast-replica-rebuild.md:20:- fast-replica-rebuild-enabled <br>
content/docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:16:- **snapshot-data-integrity** <br>
content/docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:24:- **snapshot-data-integrity-immediate-check-after-snapshot-creation** <br>
content/docs/1.6.0/advanced-resources/snapshot-data-integrity-check.md:28:- **snapshot-data-integrity-cronjob** <br>
content/docs/1.6.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/1.6.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/1.6.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/1.6.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/1.6.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/1.6.0/deploy/important-notes/index.md:29:Please ensure your Kubernetes cluster is at least v1.21 before upgrading to Longhorn v{{< current-version >}} because this is the minimum version Longhorn v{{< current-version >}} supports.
content/docs/1.6.0/deploy/important-notes/index.md:40:after upgrading from a version without this mechanism (v1.5.1 or older) to v{{< current-version >}}.
content/docs/1.6.0/deploy/install/install-with-argocd.md:18:> Use [this script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) to check the Longhorn environment for potential issues.
content/docs/1.6.0/deploy/install/install-with-fleet.md:19:> Use [this script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) to check the Longhorn environment for potential issues.
content/docs/1.6.0/deploy/install/install-with-flux.md:25:> Use [this script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) to check the Longhorn environment for potential issues.
content/docs/1.6.0/deploy/install/install-with-helm.md:13:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.6.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.6.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/1.6.0/deploy/install/install-with-rancher.md:20:> * For Kubernetes < v1.25, if your cluster still enables Pod Security Policy admission controller, set `Other Settings > Pod Security Policy` to `true` to install `longhorn-psp` PodSecurityPolicy resource which allows privileged Longhorn pods to start.
content/docs/1.6.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/1.6.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.4.x. For other versions, please upgrade to v1.4.x first.
content/docs/1.6.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.4.x to v{{< current-version >}}.
content/docs/1.6.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/1.6.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/1.6.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.4.x to v{{< current-version >}}.
content/docs/1.6.0/references/helm-values.md:242:| defaultSettings.replicaZoneSoftAntiAffinity | Setting that allows Longhorn to schedule new replicas of a volume to nodes in the same zone as existing healthy replicas. Nodes that do not belong to any zone are treated as existing in the zone that contains healthy replicas. When identifying zones, Longhorn relies on the label "topology.kubernetes.io/zone=<Zone name of the node>" in the Kubernetes node object. |
content/docs/1.6.0/references/storage-class-parameters.md:229:If Longhorn is installed via Helm, values in the default storage class can be set by editing the corresponding item in [values.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/chart/values.yaml).  All of the Storage Class parameters have a prefix of "persistence".  For example, `persistence.defaultNodeSelector`.
content/docs/1.6.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:28:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
content/docs/1.6.0/snapshots-and-backups/csi-snapshot-support/enable-csi-snapshot-support.md:34:because Longhorn v{{< current-version >}} uses [CSI external-snapshotter](https://kubernetes-csi.github.io/docs/external-snapshotter.html) v6.3.2
content/docs/1.6.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/1.6.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:18:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:29:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:36:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:40:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:46:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:54:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:61:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:75:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:81:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:86:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/1.6.0/volumes-and-nodes/volume-size.md:94:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/1.6.0/best-practices.md:54:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/1.6.0/best-practices.md:70:We recommend running your Kubernetes cluster on one of the following versions. These versions are the active supported versions prior to the Longhorn release, and have been tested with Longhorn v{{< current-version >}}.
content/docs/1.6.0/v2-data-engine/performance.md:22:{{< figure src="/img/diagrams/v2-data-engine/equinix-iops.svg" >}}
content/docs/1.6.0/v2-data-engine/performance.md:24:{{< figure src="/img/diagrams/v2-data-engine/equinix-bw.svg" >}}
content/docs/1.6.0/v2-data-engine/performance.md:26:{{< figure src="/img/diagrams/v2-data-engine/equinix-latency.svg" >}}
content/docs/1.6.0/v2-data-engine/performance.md:39:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-iops.svg" >}}
content/docs/1.6.0/v2-data-engine/performance.md:41:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-bw.svg" >}}
content/docs/1.6.0/v2-data-engine/performance.md:43:{{< figure src="/img/diagrams/v2-data-engine/aws-c5d-xlarge-latency.svg" >}}
content/docs/_index.md:9:{{< version-list >}}
content/docs/archives/0.8.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/0.8.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/0.8.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/0.8.0/getting-started/quick-start-with-helm.md:25:{{< requirement title="Helm setup" >}}
content/docs/archives/0.8.0/getting-started/quick-start-with-helm.md:27:{{< /requirement >}}
content/docs/archives/0.8.0/getting-started/quick-start-with-helm.md:85:{{< warning title="No authentication by default" >}}
content/docs/archives/0.8.0/getting-started/quick-start-with-helm.md:87:{{< /warning >}}
content/docs/archives/0.8.0/getting-started/quick-start-with-helm.md:93:{{< figure src="/img/screenshots/getting-started/longhorn-ui.png" >}}
content/docs/archives/0.8.0/install/customizing-default-settings.md:10:{{< info >}}
content/docs/archives/0.8.0/install/customizing-default-settings.md:14:{{< /info >}}
content/docs/archives/0.8.0/install/install-with-helm.md:8:{{< requirement title="Helm setup" >}}
content/docs/archives/0.8.0/install/install-with-helm.md:10:{{< /requirement >}}
content/docs/archives/0.8.0/install/install-with-helm.md:76:{{< warning title="No authentication by default" >}}
content/docs/archives/0.8.0/install/install-with-helm.md:78:{{< /warning >}}
content/docs/archives/0.8.0/install/install-with-helm.md:82:{{< figure src="/img/screenshots/install/dashboard.png" >}}
content/docs/archives/0.8.0/install/install-with-kubectl.md:23:{{< info title="Running Longhorn on Google Kubernetes Engine" >}}
content/docs/archives/0.8.0/install/install-with-kubectl.md:25:{{< /info >}}
content/docs/archives/0.8.0/install/install-with-rancher.md:31:{{< figure src="/img/screenshots/install/select-project.png" >}}
content/docs/archives/0.8.0/install/install-with-rancher.md:33:{{< figure src="/img/screenshots/install/apps-launch.png" >}}
content/docs/archives/0.8.0/install/install-with-rancher.md:35:{{< figure src="/img/screenshots/install/longhorn.png" >}}
content/docs/archives/0.8.0/install/install-with-rancher.md:38:{{< figure src="/img/screenshots/install/launch-longhorn.png" >}}
content/docs/archives/0.8.0/install/install-with-rancher.md:40:{{< figure src="/img/screenshots/install/installed-longhorn.png" >}}
content/docs/archives/0.8.0/install/install-with-rancher.md:42:{{< figure src="/img/screenshots/install/dashboard.png" >}}
content/docs/archives/0.8.0/users-guide/backup-and-restore/backupstores-and-backuptargets.md:120:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/0.8.0/users-guide/distribution-specific-notes/csi-on-k3s.md:33:You can override the root-dir detection by setting argument `kubelet-root-dir` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/0.8.1/advanced-resources/os-distro-specific/csi-on-k3s.md:35:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/0.8.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/0.8.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/0.8.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/0.8.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/0.8.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/0.8.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/0.8.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:131:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.0.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.0.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by manually setting environment `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.0.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.0.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.0.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.0.0/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.0/references/settings.md:62:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.0/references/settings.md:69:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.0/references/settings.md:79:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:136:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.0.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.0.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.0.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-01.png" >}}
content/docs/archives/1.0.1/advanced-resources/rwx-workloads.md:16:- [01-security.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/rwx/01-security.yaml)
content/docs/archives/1.0.1/advanced-resources/rwx-workloads.md:17:- [02-longhorn-nfs-provisioner.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/rwx/02-longhorn-nfs-provisioner.yaml)
content/docs/archives/1.0.1/advanced-resources/rwx-workloads.md:18:- [03-rwx-test.yaml](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/rwx/03-rwx-test.yaml)
content/docs/archives/1.0.1/advanced-resources/rwx-workloads.md:37:{{< figure src="/img/diagrams/rwx/rwx-02.png" >}}
content/docs/archives/1.0.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.0.1/concepts.md:167:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.0.1/concepts.md:294:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.0.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.1/references/settings.md:63:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.1/references/settings.md:70:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.1/references/settings.md:80:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:175:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.0.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.0.1/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.0.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.0.2/advanced-resources/deploy/airgap.md:193:In v1.0.2, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.0.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.0.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-01.png" >}}
content/docs/archives/1.0.2/advanced-resources/rwx-workloads.md:37:{{< figure src="/img/diagrams/rwx/rwx-02.png" >}}
content/docs/archives/1.0.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.0.2/concepts.md:167:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.0.2/concepts.md:294:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.0.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.0.2/references/settings.md:63:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.2/references/settings.md:70:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.2/references/settings.md:80:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.0.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:179:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.0.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.0.2/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.1.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.1.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.1.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.1.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.1.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.1.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.1.0/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.1.0/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.1.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.1.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.1.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.1.0/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.0.x. For other versions, please upgrade to v1.0.x first.
content/docs/archives/1.1.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.0.x to v{{< current-version >}}.
content/docs/archives/1.1.0/references/settings.md:75:> Default: `longhornio/longhorn-engine:v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.1.0/references/settings.md:82:> Default: `longhornio/longhorn-instance-manager:v1_20200514` for Longhorn v{{< current-version >}}
content/docs/archives/1.1.0/references/settings.md:92:> Default: `v{{< current-version >}}` for Longhorn v{{< current-version >}}
content/docs/archives/1.1.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:183:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.1.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.1.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.1.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.1.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.1.0/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.1.0/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.1.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.1.0/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.1.0/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.1.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.1.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.1.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.1.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.1.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.1.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.1.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.1.1/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.1.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.1.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.1.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.1.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.0. For other versions, please upgrade to v1.1.0 first.
content/docs/archives/1.1.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.0 to v{{< current-version >}}.
content/docs/archives/1.1.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:250:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.1.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.1.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.1.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.1.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.1.1/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.1.1/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.1.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.1.1/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.1.1/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.1.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.1.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.1.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.1.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.1.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.1.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.1.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.1.2/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.1.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.1.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.1.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.1.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.1.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x to v{{< current-version >}}.
content/docs/archives/1.1.2/deploy/upgrade/upgrade-engine.md:36:Live upgrade is supported for upgrading from v1.1.x to v{{< current-version >}}.
content/docs/archives/1.1.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.1.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.1.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.1.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.1.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.1.2/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.1.2/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.1.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.1.2/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.1.2/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.1.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.1.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.1.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.1.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.1.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.1.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.1.3/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.1.3/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.1.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.1.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.1.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.1.3/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.1.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x to v{{< current-version >}}.
content/docs/archives/1.1.3/deploy/upgrade/upgrade-engine.md:36:Live upgrade is supported for upgrading from v1.1.x to v{{< current-version >}}.
content/docs/archives/1.1.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.1.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.1.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.1.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.1.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.1.3/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.1.3/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.1.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.1.3/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.1.3/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.2.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.2.0/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.2.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.2.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.2.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.2.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.2.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.2.0/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.2.0/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.2.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.2.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.2.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.2.0/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.2.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x to v{{< current-version >}}.
content/docs/archives/1.2.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x to v{{< current-version >}}.
content/docs/archives/1.2.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.2.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.2.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.2.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.2.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.2.0/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.2.0/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.2.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.2.0/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.2.0/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.2.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.2.1/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.2.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.2.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.2.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.2.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.2.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.2.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.2.1/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.2.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.2.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.2.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.2.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.0. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.2.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.0 to v{{< current-version >}}.
content/docs/archives/1.2.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.0 to v{{< current-version >}}.
content/docs/archives/1.2.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.2.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.2.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.2.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.2.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.2.1/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.2.1/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.2.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.2.1/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.2.1/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.2.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.2.2/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.2.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.2.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.2.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.2.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.2.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.2.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.2.2/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.2.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.2.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.2.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.2.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.2.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.2.2/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
content/docs/archives/1.2.2/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.2.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.2.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.2.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.2.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.2.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.2.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.2.2/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.2.2/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.2.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.2.2/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.2.2/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.2.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.2.3/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.2.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.2.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.2.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.2.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.2.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.2.3/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.2.3/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.2.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.2.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.2.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.2.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.2.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.2.3/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
content/docs/archives/1.2.3/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.2.3/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.2.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.2.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.2.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.2.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.2.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.2.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.2.3/volumes-and-nodes/volume-size.md:26:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-0.png" >}}
content/docs/archives/1.2.3/volumes-and-nodes/volume-size.md:34:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-1.png" >}} 
content/docs/archives/1.2.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-2.png" >}}
content/docs/archives/1.2.3/volumes-and-nodes/volume-size.md:43:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-3.png" >}}
content/docs/archives/1.2.3/volumes-and-nodes/volume-size.md:47:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-example-4.png" >}}
content/docs/archives/1.2.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.2.4/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.2.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.2.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.2.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.2.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.2.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.2.4/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.2.4/best-practices.md:30:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.2.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.2.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.2.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.2.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.2.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.2.4/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
content/docs/archives/1.2.4/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.2.4/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
content/docs/archives/1.2.4/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.2.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.2.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.2.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.2.4/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.2.5/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.2.5/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.2.5/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.2.5/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.2.5/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.2.5/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.2.5/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.2.5/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.2.5/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.2.5/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.2.5/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.2.5/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.2.5/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.2.5/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.2.5/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
content/docs/archives/1.2.5/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.2.5/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.5/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.5/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.5/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.2.5/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.2.5/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.5/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.2.5/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/archives/1.2.5/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/archives/1.2.6/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.2.6/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.2.6/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.2.6/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.2.6/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.2.6/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.2.6/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.2.6/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.2.6/best-practices.md:28:The below Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing, but it does not mean Longhorn only supports them. Basically,
content/docs/archives/1.2.6/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.2.6/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.2.6/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.2.6/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.2.6/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.2.6/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18) in v{{< current-version >}}.
content/docs/archives/1.2.6/deploy/important-notes/index.md:11:1. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.2.6/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.6/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.6/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.2.6/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.1.x or v1.2.x. For other versions, please upgrade to v1.1.x first.
content/docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.2.6/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.2.6/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.1.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.2.6/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.2.6/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/archives/1.2.6/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/archives/1.3.0/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.3.0/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.3.0/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.3.0/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.3.0/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.3.0/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.3.0/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.3.0/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.3.0/best-practices.md:45:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/archives/1.3.0/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.3.0/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.3.0/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.3.0/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.3.0/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.3.0/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
content/docs/archives/1.3.0/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.3.0/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
content/docs/archives/1.3.0/deploy/install/install-with-helm.md:15:> [This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.0/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.0/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.0/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.2.x. For other versions, please upgrade to v1.2.x first.
content/docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.3.0/deploy/upgrade/longhorn-manager.md:42:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.3.0/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.0/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.3.0/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/archives/1.3.0/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/archives/1.3.1/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.3.1/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.3.1/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.3.1/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.3.1/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.3.1/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.3.1/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.3.1/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.3.1/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/archives/1.3.1/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.3.1/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.3.1/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.3.1/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.3.1/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.3.1/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
content/docs/archives/1.3.1/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.3.1/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
content/docs/archives/1.3.1/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.1/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.1/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.1/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.3.1/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
content/docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
content/docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
content/docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.3.1/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.3.1/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.1/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.3.1/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/archives/1.3.1/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/archives/1.3.2/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.3.2/advanced-resources/data-recovery/recover-without-system.md:40:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.3.2/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.3.2/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.3.2/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.3.2/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.3.2/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.3.2/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.3.2/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/archives/1.3.2/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.3.2/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.3.2/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.3.2/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.3.2/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.3.2/deploy/important-notes/index.md:10:1. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
content/docs/archives/1.3.2/deploy/important-notes/index.md:11:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.3.2/deploy/important-notes/index.md:12:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
content/docs/archives/1.3.2/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.2/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.2/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.2/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.3.2/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
content/docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
content/docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
content/docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.3.2/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.3.2/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.2/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.3.2/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/archives/1.3.2/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/archives/1.3.3/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.3.3/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.3.3/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.3.3/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.3.3/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.3.3/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.3.3/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.3.3/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.3.3/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/archives/1.3.3/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.3.3/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.3.3/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.3.3/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.3.3/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.3.3/deploy/important-notes/index.md:11:2. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
content/docs/archives/1.3.3/deploy/important-notes/index.md:12:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.3.3/deploy/important-notes/index.md:13:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
content/docs/archives/1.3.3/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.3/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.3/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.3/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.3.3/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
content/docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
content/docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
content/docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.3.3/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.3.3/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.3/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.3.3/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/archives/1.3.3/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/archives/1.3.4/advanced-resources/data-recovery/recover-without-system.md:8:1. Copy the [yaml template](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/examples/restore_to_file.yaml.template): Make a copy of `examples/restore_to_file.yaml.template` as e.g. `restore.yaml`.
content/docs/archives/1.3.4/advanced-resources/data-recovery/recover-without-system.md:42:We also provide a script, [restore-backup-to-file.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/restore-backup-to-file.sh), to restore a backup. The following parameters should be specified:
content/docs/archives/1.3.4/advanced-resources/deploy/airgap.md:19:  - A full list of all needed images is in [longhorn-images.txt](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/deploy/longhorn-images.txt). First, download the images list by running:
content/docs/archives/1.3.4/advanced-resources/deploy/airgap.md:23:  - We provide a script, [save-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/save-images.sh), to quickly pull the above `longhorn-images.txt` list. If you specify a `tar.gz` file name for flag `--images`, the script will save all images to the provided filename. In the example below, the script pulls and saves Longhorn images to the file `longhorn-images.tar.gz`. You then can copy the file to your air-gap environment. On the other hand, if you don't specify the file name, the script just pulls the list of images to your computer.
content/docs/archives/1.3.4/advanced-resources/deploy/airgap.md:29:  - We provide another script, [load-images.sh](https://raw.githubusercontent.com/longhorn/longhorn/v{{< current-version >}}/scripts/load-images.sh), to push Longhorn images to your private registry. If you specify a `tar.gz` file name for flag `--images`, the script loads images from the `tar` file and pushes them. Otherwise, it will find images in your local Docker and push them. In the example below, the script loads images from the file `longhorn-images.tar.gz` and pushes them to `<YOUR-PRIVATE-REGISTRY>`
content/docs/archives/1.3.4/advanced-resources/deploy/airgap.md:173:In v{{< current-version >}}, Longhorn automatically adds <REGISTRY_URL> prefix to images. You simply need to set the registryUrl parameters to pull images from your private registry.
content/docs/archives/1.3.4/advanced-resources/os-distro-specific/csi-on-k3s.md:28:You can override the root-dir detection by setting environment variable `KUBELET_ROOT_DIR` in https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/longhorn.yaml.
content/docs/archives/1.3.4/advanced-resources/rwx-workloads.md:10:{{< figure src="/img/diagrams/rwx/rwx-native-architecture.png" >}}
content/docs/archives/1.3.4/best-practices.md:43:The following Linux OS distributions and versions have been verified during the v{{< current-version >}} release testing. However, this does not imply that Longhorn exclusively supports these distributions. Essentially, Longhorn should function well on any certified Kubernetes cluster running on Linux nodes with a wide range of general-purpose operating systems, as well as verified container-optimized operating systems like SLE Micro.
content/docs/archives/1.3.4/concepts.md:74:{{< figure alt="read/write data flow between the volume, controller instance, replica instances, and disks" src="/img/diagrams/architecture/how-longhorn-works.svg" >}}
content/docs/archives/1.3.4/concepts.md:163:{{< figure alt="how the read index keeps track of which snapshot holds the most recent data" src="/img/diagrams/architecture/read-index.png" >}}
content/docs/archives/1.3.4/concepts.md:290:{{< figure alt="the relationship between backups in secondary storage and snapshots in primary storage" src="/img/diagrams/concepts/longhorn-backup-creation.png" >}}
content/docs/archives/1.3.4/deploy/important-notes/index.md:6:This page lists important notes for Longhorn v{{< current-version >}}.
content/docs/archives/1.3.4/deploy/important-notes/index.md:7:Please see [here](https://github.com/longhorn/longhorn/releases/tag/v{{< current-version >}}) for the full release note.
content/docs/archives/1.3.4/deploy/important-notes/index.md:11:2. Please ensure your Kubernetes cluster is at least v1.18 and at most v1.24 before upgrading to Longhorn v{{< current-version >}} because the supported Kubernetes version has been updated (>= v1.18 and <= v1.24) in v{{< current-version >}}.
content/docs/archives/1.3.4/deploy/important-notes/index.md:12:2. After the upgrade, the recurring job settings of volumes will be migrated to new recurring job resources, and the `RecurringJobs` field in the volume spec will be deprecated. [[doc](https://longhorn.io/docs/{{< current-version >}}/deploy/upgrade/#4-automatically-migrate-recurring-jobs)]
content/docs/archives/1.3.4/deploy/important-notes/index.md:13:3. When upgrading from a Longhorn version >= 1.2.0 and <= v1.2.3 to v{{< current-version >}}, if your cluster has many backups, you may expect to have a long upgrade time (with 22000 backups, it could take a few hours). Helm upgrade may timeout and you may need to re-run the upgrade command or set a longer timeout. This is [a known issue](https://github.com/longhorn/longhorn/issues/3890)
content/docs/archives/1.3.4/deploy/install/install-with-helm.md:13:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.4/deploy/install/install-with-kubectl.md:11:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.4/deploy/install/install-with-rancher.md:15:[This script](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/scripts/environment_check.sh) can be used to check the Longhorn environment for potential issues.
content/docs/archives/1.3.4/deploy/upgrade/_index.md:10:There are no deprecated or incompatible changes introduced in v{{< current-version >}}.
content/docs/archives/1.3.4/deploy/upgrade/_index.md:18:- To upgrade from v1.3.x (< v{{< current-version >}}) or v1.2.x, see [this section.](./longhorn-manager)
content/docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:6:### Upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x
content/docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:8:We only support upgrading to v{{< current-version >}} from v1.3.x or v1.2.x. For other versions, please upgrade to v1.3.x or v1.2.x first.
content/docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:10:Engine live upgrade is supported from v1.3.x or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:38:{{< figure src="/img/screenshots/install/cluster-manager.png" >}}
content/docs/archives/1.3.4/deploy/upgrade/longhorn-manager.md:40:{{< figure src="/img/screenshots/install/cluster-explorer.png" >}}
content/docs/archives/1.3.4/deploy/upgrade/upgrade-engine.md:24:Live upgrade is supported for upgrading from v1.3.x (< v{{< current-version >}}) or v1.2.x to v{{< current-version >}}.
content/docs/archives/1.3.4/snapshots-and-backups/backup-and-restore/set-backup-target.md:248:You can find an example NFS backupstore for testing purpose [here](https://github.com/longhorn/longhorn/blob/v{{< current-version >}}/deploy/backupstores/nfs-backupstore.yaml).
content/docs/archives/1.3.4/volumes-and-nodes/node-space-usage.md:13:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-dashboard-page.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/node-space-usage.md:27:{{< figure src="/img/screenshots/volumes-and-nodes/space-usage-info-node-page.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:9:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-nominal-size.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:17:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-actual-size.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:28:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:35:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig1.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:39:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:45:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig2.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:53:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig3.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:60:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig4.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:74:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig5.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:80:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig6.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:85:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig7.png" >}}
content/docs/archives/1.3.4/volumes-and-nodes/volume-size.md:93:{{< figure src="/img/screenshots/volumes-and-nodes/volume-size-illustration-fig8.png" >}}
content/docs/archives/_index.md:9:{{< version-list >}}
content/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:21:{{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-chart-in-old-rancher-ui.png" >}}
content/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:29:{{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-installation-in-legacy-ui.png" >}}
content/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:33:{{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-chart-in-new-ui.png" >}}
content/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui.md:173:   {{< figure src="/img/kb/how-to-migrate-longhorn-chart-installed-in-old-rancher-ui-to-the-chart-in-new-rancher-ui/longhorn-installation-in-legacy-ui.png" >}}
content/kb/troubleshooting-unable-to-mount-an-nfs-backup-target.md:93:  - <https://github.com/longhorn/longhorn/issues/3576>
content/kb/troubleshooting-unable-to-mount-an-nfs-backup-target.md:94:  - <https://github.com/longhorn/longhorn/discussions/3805>
content/kb/troubleshooting-websocket_handshake_error_with_unexpected_response_code_200.md:12:Existing Longhorn versions < v1.1.0 upgrade to Longhorn >= v1.1.0.
